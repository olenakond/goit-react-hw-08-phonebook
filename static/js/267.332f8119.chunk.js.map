{"version":3,"file":"static/js/267.332f8119.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/index.jsx","redux/filter/selectors.js","components/Contact/index.jsx","components/ContactList/ContactList.styled.js","components/ContactList/index.jsx","components/Filter/index.jsx","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/index.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { InputLabel, TextField, Button } from '@mui/material';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = ({ target: { value, name } }) => {\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n\n  const createContact = dataFromForm => {\n    const isContactExist = contacts.find(\n      contact => contact.name === dataFromForm.name\n    );\n    if (isContactExist) {\n      return alert(`${dataFromForm.name} is already in contacts.`);\n    }\n    dispatch(addContact(dataFromForm));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputLabel htmlFor={nameInputId}>Name</InputLabel>\n      <TextField\n        variant=\"outlined\"\n        fullWidth\n        onChange={handleChange}\n        value={name}\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"[A-Za-z]{1,32}\"\n        placeholder=\"Name\"\n        title=\"Name may contain only letters. For example Adrian, Jacob.\"\n        required\n      />\n      <InputLabel sx={{ mt: 2 }} htmlFor={numberInputId}>\n        Number\n      </InputLabel>\n      <TextField\n        variant=\"outlined\"\n        fullWidth\n        onChange={handleChange}\n        value={number}\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"[0-9]{1,32}\"\n        placeholder=\"123456789\"\n        title=\"Phone number must be digits\"\n        required\n      />\n      <Button variant=\"outlined\" sx={{ mt: 2 }} type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    const createContactsByfilter = () => {\n      if (!filter) {\n        return;\n      }\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    };\n    const filteredContacts = createContactsByfilter();\n    return filteredContacts ?? contacts;\n  }\n);\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { blueGrey } from '@mui/material/colors';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <>\n      <ListItem\n        secondaryAction={\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            type=\"button\"\n            onClick={handleDelete}\n          >\n            <DeleteIcon />\n          </IconButton>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar sx={{ bgcolor: blueGrey[500] }}>\n            {contact.name.at(0).toUpperCase()}\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={contact.name} secondary={contact.number} />\n      </ListItem>\n    </>\n  );\n};\n\nexport default Contact;\n","import { styled } from 'styled-components';\n\nexport const List = styled('ul')`\n  padding: 8px 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  background-color: #f7fcfc;\n  border-radius: 4px;\n  border: solid 1px #c5c7c7;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/filter/selectors';\nimport Contact from '../Contact';\nimport { List } from './ContactList.styled';\nimport { Typography } from '@mui/material';\nimport { blueGrey } from '@mui/material/colors';\n\nconst ContactList = () => {\n  const contactsList = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      {contactsList.length > 0 && (\n        <>\n          <Typography\n            variant=\"body1\"\n            component=\"h2\"\n            sx={{ mt: 2, color: blueGrey[800] }}\n          >\n            Contacts\n          </Typography>\n          <List>\n            {contactsList.map(contact => (\n              <Contact key={contact.id} contact={contact} />\n            ))}\n          </List>\n        </>\n      )}\n      {contactsList.length === 0 && (\n        <Typography\n          variant=\"body1\"\n          component=\"h2\"\n          sx={{ mt: 2, color: blueGrey[800] }}\n        >\n          Create your contacts...\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/filter/slice';\nimport { InputLabel, TextField } from '@mui/material';\n\nconst Filter = () => {\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      <InputLabel htmlFor={filterInputId}>Find contacts by name</InputLabel>\n      <TextField\n        variant=\"outlined\"\n        fullWidth\n        onChange={handleFilter}\n        id={filterInputId}\n        type=\"text\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import { styled } from 'styled-components';\n\nexport const Container = styled('div')`\n  margin: 40px auto;\n  padding: 20px 20px;\n  display: flex;\n  gap: 30px;\n  justify-content: center;\n  border-radius: 10px;\n`;\n\nexport const ContactContainer = styled('div')`\n  padding: 8px 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  width: 450px;\n  height: 250px;\n  background-color: #f7fcfc;\n  border-radius: 10px;\n  border: solid 1px #c5c7c7;\n`;\n\nexport const ListContainer = styled('div')`\n  padding: 8px 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  width: 450px;\n  background-color: #f7fcfc;\n  border-radius: 10px;\n  border: solid 1px #c5c7c7;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport {\n  Container,\n  ContactContainer,\n  ListContainer,\n} from './ContactsPage.styled';\nimport { LinearProgress, Typography } from '@mui/material';\nimport { blueGrey } from '@mui/material/colors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      {isLoading && <LinearProgress />}\n      <Typography\n        variant=\"h3\"\n        component=\"h1\"\n        sx={{ textAlign: 'center', mt: 3, color: blueGrey[900] }}\n      >\n        Phone book\n      </Typography>\n      <Container>\n        <ContactContainer>\n          <ContactForm />\n          {error && (\n            <Typography\n              variant=\"body2\"\n              component=\"p\"\n              sx={{ textAlign: 'center', mt: 5, color: blueGrey[900] }}\n            >\n              Something went wrong. Please, try again.\n            </Typography>\n          )}\n        </ContactContainer>\n        <ListContainer>\n          <Filter />\n          <ContactList />\n        </ListContainer>\n      </Container>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","handleChange","_ref","_ref$target","target","value","_jsxs","onSubmit","e","preventDefault","dataFromForm","find","contact","alert","concat","addContact","createContact","children","_jsx","InputLabel","htmlFor","TextField","variant","fullWidth","onChange","id","type","pattern","placeholder","title","required","sx","mt","Button","selectFilteredContacts","createSelector","filter","filteredContacts","toLowerCase","includes","createContactsByfilter","_Fragment","ListItem","secondaryAction","IconButton","edge","onClick","deleteContact","DeleteIcon","ListItemAvatar","Avatar","bgcolor","blueGrey","at","toUpperCase","ListItemText","primary","secondary","List","styled","_templateObject","_taggedTemplateLiteral","contactsList","length","Typography","component","color","map","Contact","filterInputId","setFilter","Container","ContactContainer","_templateObject2","ListContainer","_templateObject3","useEffect","fetchContacts","LinearProgress","textAlign","ContactForm","Filter","ContactList"],"sourceRoot":""}