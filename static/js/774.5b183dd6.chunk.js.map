{"version":3,"file":"static/js/774.5b183dd6.chunk.js","mappings":"2NAiCA,EA7BkB,WAChB,IAAMA,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,GAAWC,EAAAA,EAAAA,MAcjB,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfP,GACEQ,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACP,EAG+BC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAOC,QAASnB,EAAaiB,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,SAAOE,KAAK,QAAQC,GAAIrB,EAAcsB,KAAK,QAAQC,UAAQ,KAC3DL,EAAAA,EAAAA,KAAA,SAAOC,QAASjB,EAAgBe,SAAC,cACjCC,EAAAA,EAAAA,KAAA,SAAOE,KAAK,WAAWC,GAAInB,EAAiBoB,KAAK,WAAWC,UAAQ,KACpEL,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAQH,SAAC,YAG5B,E,SCdA,EAbkB,WAChB,IAAMO,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1B,OACEvB,EAAAA,EAAAA,MAAA,QAAAY,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAACW,EAAS,IACTL,IAAaN,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAChBU,IAAST,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+CAGnB,C,uDCdO,IAkBIhB,EAAS,WAAH,IAAI6B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAAChB,EAAIiB,GAWvD,OAREjB,IAFFiB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/LoginForm/index.jsx","pages/LoginPage/index.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { logIn } from 'redux/auth/operations';\n\nconst LoginForm = () => {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={emailInputId}>Email</label>\n      <input type=\"email\" id={emailInputId} name=\"email\" required />\n      <label htmlFor={passwordInputId}>Password</label>\n      <input type=\"password\" id={passwordInputId} name=\"password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import { useSelector } from 'react-redux';\nimport LoginForm from 'components/LoginForm';\nimport { selectError, selectIsLoading } from 'redux/auth/selectors';\n\nconst LoginPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return (\n    <main>\n      <h1> Login</h1>\n      <LoginForm />\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Something went wrong. Please, try again.</p>}\n    </main>\n  );\n};\n\nexport default LoginPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["emailInputId","nanoid","passwordInputId","dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","children","_jsx","htmlFor","type","id","name","required","isLoading","useSelector","selectIsLoading","error","selectError","LoginForm","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}